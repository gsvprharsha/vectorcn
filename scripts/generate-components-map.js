// NOTE: Run the command: ``pnpm exec node scripts/generate-components-map.js`` to auto generate the componentMap.ts file. DO NOT EDIT MANUALLY
const fs = require('fs');
const path = require('path');

const blocksDir = path.resolve(__dirname, '../packages/ui/src/blocks');
const outputFile = path.resolve(__dirname, '../packages/ui/src/componentsMap.ts');

function toPascalCase(str) {
  return str.replace(/(^\w|-\w)/g, (m) => m.replace('-', '').toUpperCase());
}

function generate() {
  const categories = fs.readdirSync(blocksDir).filter((file) => {
    return fs.statSync(path.join(blocksDir, file)).isDirectory();
  });

  const imports = [];
  const map = {};

  categories.forEach(category => {
    const categoryDir = path.join(blocksDir, category);
    const ids = fs.readdirSync(categoryDir).filter((file) => {
      return fs.statSync(path.join(categoryDir, file)).isDirectory();
    });

    ids.forEach(id => {
      const varName = toPascalCase(category) + toPascalCase(id);
      const importPath = `./blocks/${category}/${id}`;
      imports.push(`import ${varName} from '${importPath}';`);

      if (!map[category]) {
        map[category] = {};
      }
      map[category][id] = varName;
    });
  });

  // Create map entries string with proper indentation
  const mapEntries = Object.entries(map).map(([category, ids]) => {
    const idsEntries = Object.entries(ids).map(
      ([id, varName]) => `    '${id}': ${varName},`
    ).join('\n');

    return `  '${category}': {\n${idsEntries}\n  },`;
  }).join('\n');

  const fileContent = `// THIS FILE IS AUTO-GENERATED BY scripts/generate-components-map.js
// DO NOT EDIT MANUALLY

import React from 'react';

${imports.join('\n')}

export const componentsMap: Record<string, Record<string, React.ComponentType<any>>> = {
${mapEntries}
};
`;

  fs.writeFileSync(outputFile, fileContent, 'utf-8');
  console.log(`Generated componentsMap.ts with ${imports.length} imports.`);
}

generate();